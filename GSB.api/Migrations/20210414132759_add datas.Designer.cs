// <auto-generated />
using System;
using GSB.api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GSB.api.Migrations
{
    [DbContext(typeof(GsbContext))]
    [Migration("20210414132759_add datas")]
    partial class adddatas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GSB.Shared.Models.Etat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Etats");

                    b.HasData(
                        new
                        {
                            Id = "CL",
                            Libelle = "Sasie Cloturée"
                        },
                        new
                        {
                            Id = "CR",
                            Libelle = "Fiche crée, saisie en cours"
                        },
                        new
                        {
                            Id = "RB",
                            Libelle = "Remboursée"
                        },
                        new
                        {
                            Id = "VA",
                            Libelle = "Valdidée et mise en paiement"
                        });
                });

            modelBuilder.Entity("GSB.Shared.Models.FicheFrais", b =>
                {
                    b.Property<int>("VisiteurId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("EtatId")
                        .HasColumnType("int");

                    b.Property<string>("EtatId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ForfaitId")
                        .HasColumnType("int");

                    b.Property<string>("ForfaitId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Justificatifs")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LignesFraisMois")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontantValide")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VisiteurId", "Mois");

                    b.HasIndex("EtatId1");

                    b.HasIndex("ForfaitId1");

                    b.HasIndex("LignesFraisMois");

                    b.ToTable("FichesFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Forfait", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Forfaits");

                    b.HasData(
                        new
                        {
                            Id = "ETP",
                            Libelle = "Forfait Etape",
                            Montant = 110.00m
                        },
                        new
                        {
                            Id = "KM",
                            Libelle = "Forfait Kilometrique",
                            Montant = 0.62m
                        },
                        new
                        {
                            Id = "NUI",
                            Libelle = "Forfait Hotel",
                            Montant = 80.00m
                        },
                        new
                        {
                            Id = "REP",
                            Libelle = "Forfait Restaurant",
                            Montant = 25.00m
                        });
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisiteurId")
                        .HasColumnType("int");

                    b.HasKey("Mois");

                    b.HasIndex("VisiteurId");

                    b.ToTable("LigneFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodePostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adresse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Visiteurs");
                });

            modelBuilder.Entity("GSB.Shared.Models.FicheFrais", b =>
                {
                    b.HasOne("GSB.Shared.Models.Etat", "Etat")
                        .WithMany()
                        .HasForeignKey("EtatId1");

                    b.HasOne("GSB.Shared.Models.Forfait", "Forfait")
                        .WithMany()
                        .HasForeignKey("ForfaitId1");

                    b.HasOne("GSB.Shared.Models.LigneFrais", "LignesFrais")
                        .WithMany("FicheFrais")
                        .HasForeignKey("LignesFraisMois");

                    b.HasOne("GSB.Shared.Models.Visiteur", "Visiteur")
                        .WithMany()
                        .HasForeignKey("VisiteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etat");

                    b.Navigation("Forfait");

                    b.Navigation("LignesFrais");

                    b.Navigation("Visiteur");
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.HasOne("GSB.Shared.Models.Visiteur", "Visiteur")
                        .WithMany("LignesFrais")
                        .HasForeignKey("VisiteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visiteur");
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.HasOne("GSB.Shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.Navigation("FicheFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.Navigation("LignesFrais");
                });
#pragma warning restore 612, 618
        }
    }
}
