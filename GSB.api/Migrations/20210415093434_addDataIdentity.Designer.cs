// <auto-generated />
using System;
using GSB.api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GSB.api.Migrations
{
    [DbContext(typeof(GsbContext))]
    [Migration("20210415093434_addDataIdentity")]
    partial class addDataIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GSB.Shared.Models.Etat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Etats");

                    b.HasData(
                        new
                        {
                            Id = "CL",
                            Libelle = "Sasie Cloturée"
                        },
                        new
                        {
                            Id = "CR",
                            Libelle = "Fiche crée, saisie en cours"
                        },
                        new
                        {
                            Id = "RB",
                            Libelle = "Remboursée"
                        },
                        new
                        {
                            Id = "VA",
                            Libelle = "Valdidée et mise en paiement"
                        });
                });

            modelBuilder.Entity("GSB.Shared.Models.FicheFrais", b =>
                {
                    b.Property<int>("VisiteurId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("EtatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ForfaitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Justificatifs")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LignesFraisMois")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontantValide")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VisiteurId", "Mois");

                    b.HasIndex("EtatId");

                    b.HasIndex("ForfaitId");

                    b.HasIndex("LignesFraisMois");

                    b.ToTable("FichesFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Forfait", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Forfaits");

                    b.HasData(
                        new
                        {
                            Id = "ETP",
                            Libelle = "Forfait Etape",
                            Montant = 110.00m
                        },
                        new
                        {
                            Id = "KM",
                            Libelle = "Forfait Kilometrique",
                            Montant = 0.62m
                        },
                        new
                        {
                            Id = "NUI",
                            Libelle = "Forfait Hotel",
                            Montant = 80.00m
                        },
                        new
                        {
                            Id = "REP",
                            Libelle = "Forfait Restaurant",
                            Montant = 25.00m
                        });
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisiteurId")
                        .HasColumnType("int");

                    b.HasKey("Mois");

                    b.HasIndex("VisiteurId");

                    b.ToTable("LignesFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Comptable"
                        },
                        new
                        {
                            Id = 2,
                            Libelle = "Commercial"
                        });
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodePostal")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSortie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Visiteurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "6 rue de Viroflay",
                            CodePostal = 75015,
                            DateEmbauche = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSortie = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jonathan.rougier@hotmail.fr",
                            Nom = "Rougier",
                            Prenom = "Jonathan",
                            RoleId = 2,
                            Ville = "Paris"
                        });
                });

            modelBuilder.Entity("GSB.api.Areas.Identity.Data.GSBapiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VisiteurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VisiteurId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c7a9753a-972a-469f-b663-da19bcba24f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e426e2d-3be3-4156-8c0e-285d918cac5e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Password = "password",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4a84bbf-5cee-45b7-a767-43534f98081d",
                            TwoFactorEnabled = false,
                            UserName = "rougierjo",
                            VisiteurId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GSB.Shared.Models.FicheFrais", b =>
                {
                    b.HasOne("GSB.Shared.Models.Etat", "Etat")
                        .WithMany()
                        .HasForeignKey("EtatId");

                    b.HasOne("GSB.Shared.Models.Forfait", "Forfait")
                        .WithMany()
                        .HasForeignKey("ForfaitId");

                    b.HasOne("GSB.Shared.Models.LigneFrais", "LignesFrais")
                        .WithMany("FicheFrais")
                        .HasForeignKey("LignesFraisMois");

                    b.HasOne("GSB.Shared.Models.Visiteur", "Visiteur")
                        .WithMany()
                        .HasForeignKey("VisiteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etat");

                    b.Navigation("Forfait");

                    b.Navigation("LignesFrais");

                    b.Navigation("Visiteur");
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.HasOne("GSB.Shared.Models.Visiteur", "Visiteur")
                        .WithMany("LignesFrais")
                        .HasForeignKey("VisiteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visiteur");
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.HasOne("GSB.Shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GSB.api.Areas.Identity.Data.GSBapiUser", b =>
                {
                    b.HasOne("GSB.Shared.Models.Visiteur", "Visiteur")
                        .WithMany()
                        .HasForeignKey("VisiteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visiteur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GSB.api.Areas.Identity.Data.GSBapiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GSB.api.Areas.Identity.Data.GSBapiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSB.api.Areas.Identity.Data.GSBapiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GSB.api.Areas.Identity.Data.GSBapiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GSB.Shared.Models.LigneFrais", b =>
                {
                    b.Navigation("FicheFrais");
                });

            modelBuilder.Entity("GSB.Shared.Models.Visiteur", b =>
                {
                    b.Navigation("LignesFrais");
                });
#pragma warning restore 612, 618
        }
    }
}
